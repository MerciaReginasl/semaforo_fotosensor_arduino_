

Para implementar um semáforo que entra no modo noturno ao cair da noite, você precisará de um sensor de luz para detectar a ausência de luz suficiente. Um sensor apropriado para essa tarefa é o **fotossensor** 
(também conhecido como LDR - Light Dependent Resistor ou fotocélula). Vou te mostrar como você pode integrar um sensor de luz ao seu projeto e implementar o modo noturno em C++.

### Componentes necessários:

1. **Fotossensor (LDR)**: Para detectar a quantidade de luz.
2. **Resistor**: Para criar um divisor de tensão com o LDR.
3. **Microcontrolador ou placa Arduino**: Para ler o valor do sensor e controlar o semáforo.

### Esquema básico:

1. **LDR** e **resistor** formam um divisor de tensão.
2. A saída do divisor de tensão é conectada a uma entrada analógica do microcontrolador.
3. O microcontrolador lê o valor do sensor e decide se o semáforo deve estar em modo noturno ou normal.

### Código C++ para Arduino

Aqui está um exemplo básico de como você pode programar um Arduino para gerenciar o semáforo e detectar o modo noturno:

```cpp
// Definição dos pinos
const int ldrPin = A0; // Pino analógico conectado ao LDR
const int redPin = 9;  // Pino digital conectado ao LED vermelho
const int yellowPin = 10; // Pino digital conectado ao LED amarelo
const int greenPin = 11; // Pino digital conectado ao LED verde

// Valores de limiar
const int threshold = 512; // Valor de limiar para luz (ajustar conforme necessidade)

// Intervalos de tempo
const unsigned long nightModeDuration = 2000; // 2 segundos
const unsigned long offDuration = 1000; // 1 segundo

// Variáveis de tempo
unsigned long previousMillis = 0;
bool nightMode = false;

void setup() {
  // Inicialização dos pinos
  pinMode(redPin, OUTPUT);
  pinMode(yellowPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  
  // Configuração inicial dos LEDs
  digitalWrite(redPin, LOW);
  digitalWrite(yellowPin, LOW);
  digitalWrite(greenPin, HIGH); // O semáforo inicia em verde
}

void loop() {
  int ldrValue = analogRead(ldrPin); // Leitura do valor do LDR
  
  // Verifica se está escuro o suficiente para entrar no modo noturno
  if (ldrValue < threshold) {
    nightMode = true;
  } else {
    nightMode = false;
  }

  unsigned long currentMillis = millis();

  if (nightMode) {
    // Modo Noturno: Atenção por 2 segundos, apagado por 1 segundo
    if (currentMillis - previousMillis >= (nightModeDuration + offDuration)) {
      previousMillis = currentMillis;
    } else if (currentMillis - previousMillis < nightModeDuration) {
      // Acende o LED de Atenção (Amarelo)
      digitalWrite(yellowPin, HIGH);
      digitalWrite(redPin, LOW);
      digitalWrite(greenPin, LOW);
    } else {
      // Apaga o LED de Atenção
      digitalWrite(yellowPin, LOW);
      digitalWrite(redPin, LOW);
      digitalWrite(greenPin, LOW);
    }
  } else {
    // Modo Normal
    digitalWrite(yellowPin, LOW);
    digitalWrite(redPin, LOW);
    digitalWrite(greenPin, HIGH); // Sinal verde contínuo no modo normal
  }
}
```

### Explicação:

1. **Leitura do LDR**: O valor do LDR é lido pela entrada analógica `A0`. Se o valor for menor que um determinado limiar (`threshold`), o semáforo entra no modo noturno.
2. **Modo Noturno**: Se o modo noturno está ativo, o LED amarelo pisca por 2 segundos e depois é apagado por 1 segundo.
3. **Modo Normal**: No modo normal, o LED verde está aceso continuamente.

### Ajustes:

- **Threshold**: Ajuste o valor do `threshold` conforme o ambiente e a sensibilidade desejada do fotossensor.
- **Temporização**: Ajuste os tempos de `nightModeDuration` e `offDuration` conforme necessário.

Certifique-se de ajustar o circuito e o código conforme seu ambiente e requisitos específicos. Se precisar de mais detalhes ou ajuda com outra parte do projeto, sinta-se à vontade para perguntar!

_____________________________-

# Com arduino:

Para implementar um semáforo que muda para o modo noturno quando a luz ambiente cai abaixo de um determinado nível, você pode usar um sensor de luz, como um fotossensor (LDR - Light Dependent Resistor). O sensor LDR varia sua resistência com base na quantidade de luz que incide sobre ele, e você pode usá-lo para detectar se a luz ambiente caiu abaixo de um certo limiar.

### Componentes Necessários:

1. **LDR (Light Dependent Resistor)**: Para medir a intensidade da luz.
2. **Resistor**: Para criar um divisor de tensão com o LDR.
3. **Arduino**: Para processar os dados do LDR e controlar o semáforo.
4. **LEDs**: Para representar os sinais do semáforo (vermelho, amarelo, verde).
5. **Resistor de Limitação de Corrente**: Para proteger os LEDs.

### Esquema de Ligação:

1. Conecte um lado do LDR ao VCC (5V) e o outro lado ao pino analógico `A0` do Arduino.
2. Conecte um resistor (por exemplo, 10k ohms) entre o pino `A0` e o GND. Isso forma um divisor de tensão.
3. Conecte os LEDs aos pinos digitais do Arduino através de resistores de limitação de corrente.

### Código para Arduino:

Aqui está um código em C++ para Arduino que usa um LDR para determinar se o semáforo deve entrar no modo noturno. No modo noturno, o LED amarelo pisca por 2 segundos e fica apagado por 1 segundo.

```cpp
// Definição dos pinos dos LEDs
const int ldrPin = A0; // Pino analógico conectado ao LDR
const int redPin = 9;  // Pino digital conectado ao LED vermelho
const int yellowPin = 10; // Pino digital conectado ao LED amarelo
const int greenPin = 11; // Pino digital conectado ao LED verde

// Valores de limiar
const int threshold = 512; // Valor de limiar para detectar pouca luz (ajustar conforme necessidade)

// Intervalos de tempo
const unsigned long nightModeDuration = 2000; // 2 segundos
const unsigned long offDuration = 1000; // 1 segundo

// Variáveis de tempo
unsigned long previousMillis = 0;
bool nightMode = false;

void setup() {
  // Inicialização dos pinos
  pinMode(redPin, OUTPUT);
  pinMode(yellowPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  
  // Configuração inicial dos LEDs
  digitalWrite(redPin, LOW);
  digitalWrite(yellowPin, LOW);
  digitalWrite(greenPin, HIGH); // O semáforo inicia em verde
}

void loop() {
  int ldrValue = analogRead(ldrPin); // Leitura do valor do LDR
  
  // Verifica se está escuro o suficiente para entrar no modo noturno
  if (ldrValue < threshold) {
    nightMode = true;
  } else {
    nightMode = false;
  }

  unsigned long currentMillis = millis();

  if (nightMode) {
    // Modo Noturno: Atenção por 2 segundos, apagado por 1 segundo
    if (currentMillis - previousMillis >= (nightModeDuration + offDuration)) {
      previousMillis = currentMillis;
    } else if (currentMillis - previousMillis < nightModeDuration) {
      // Acende o LED de Atenção (Amarelo)
      digitalWrite(yellowPin, HIGH);
      digitalWrite(redPin, LOW);
      digitalWrite(greenPin, LOW);
    } else {
      // Apaga o LED de Atenção
      digitalWrite(yellowPin, LOW);
      digitalWrite(redPin, LOW);
      digitalWrite(greenPin, LOW);
    }
  } else {
    // Modo Normal
    digitalWrite(yellowPin, LOW);
    digitalWrite(redPin, LOW);
    digitalWrite(greenPin, HIGH); // Sinal verde contínuo no modo normal
  }
}
```

### Explicação do Código:

1. **Leitura do LDR**: O código lê o valor do LDR conectado ao pino `A0`. Se o valor for menor que um determinado limiar (`threshold`), o semáforo entra no modo noturno.
2. **Modo Noturno**: No modo noturno, o LED amarelo pisca por 2 segundos e depois fica apagado por 1 segundo.
3. **Modo Normal**: Quando não está no modo noturno, o LED verde está aceso, indicando o modo normal.

### Ajustes:

- **Threshold**: Ajuste o valor de `threshold` conforme a intensidade de luz ambiente que você deseja detectar. Você pode experimentar valores diferentes para encontrar o limiar ideal.
- **Temporização**: Ajuste os valores de `nightModeDuration` e `offDuration` para ajustar o comportamento do modo noturno.

Certifique-se de ajustar os componentes e o código conforme necessário para o seu projeto específico. Se precisar de mais assistência, estou aqui para ajudar!
